generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


//users -> profiles
//profiles        profiles         @relation(fields: [users.id], references: [profiles.user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profiles_user_id_users_id")

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id              Int              @id @unique(map: "ui_users_id")
  user_type       users_user_type?
  first_name      String?          @db.VarChar(255)
  last_name       String?          @db.VarChar(255)
  username        String           @unique(map: "username") @db.VarChar(255)
  email           String           @unique(map: "email") @db.VarChar(255)
  hashed_password String?          @db.VarChar(255)
  avatar_url      String?          @db.VarChar(255)
  last_login_at   DateTime         @default(dbgenerated("(now())")) @db.DateTime(0)
  created_at      DateTime         @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at      DateTime?        @db.DateTime(0)
  profiles        profiles         @relation(fields: [id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profiles_user_id_users_id")
  tasks tasks[]
  disputations disputations[] @relation("create_user")
  arbitrator_disputations disputations[] @relation("arbitrator_user")
}

model profiles {
  id            Int       @id @unique(map: "ui_profiles_id")
  user_id       Int?      @unique(map: "idx_profiles_user_id")
  specification String?   @db.VarChar(255)
  bio           String?   @db.VarChar(255)
  website       String?   @db.VarChar(255)
  email         String?   @db.VarChar(255)
  created_at    DateTime  @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  users         users?
}

enum users_user_type {
  client
  supplier
  arbitrator
  patron
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task_comments {
  id         Int       @id @default(autoincrement())
  task_id    Int
  comment   String?   @db.VarChar(255)
  created_at DateTime  @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  tasks      tasks     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_task_comments_id_tasks_id")

  @@index([task_id], map: "idx_task_comments_task_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task_items {
  id          Int                @id @unique(map: "ui_task_items_id") @default(autoincrement())
  task_id     Int
  user_id     Int
  status      task_items_status?
  title       String?            @db.VarChar(255)
  description String?            @db.VarChar(255)
  supplier_id Int
  //comment_id  Int?
  due_date    DateTime?          @db.DateTime(0)
  created_at  DateTime           @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at  DateTime?          @db.DateTime(0)
  tasks       tasks              @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_task_items_id_tasks_id")

  @@index([task_id], map: "idx_task_items_task_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tasks {
  id            Int             @id @default(autoincrement())
  user_id       Int
  status        tasks_status?
  title         String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  supplier_id   Int
  //comment_id    Int?
  due_date      DateTime?       @db.DateTime(0)
  created_at    DateTime        @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at    DateTime?       @db.DateTime(0)
  task_comments task_comments[]
  task_items    task_items[]
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tasks_id_users_id")
  disputations disputations[]
  //@@index([comment_id], map: "idx_task_items_comment_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model disputations {
  id            Int                  @id @default(autoincrement()) @unique(map: "ui_disputations_id")
  task_id       Int
  status        disputations_status?
  title         String               @db.VarChar(255)
  description   String?              @db.VarChar(255)
  user_id       Int
  arbitrator_id Int?
  created_at    DateTime             @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at    DateTime?            @db.DateTime(0)
  tasks         tasks                @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_disputations_task_id_tasks_id")

  users         users           @relation("create_user", fields: [user_id], references: [id])
  arbitrator_users         users?           @relation("arbitrator_user", fields: [arbitrator_id], references: [id])
  
  @@index([task_id], map: "idx_disputations_task_id")
  @@index([user_id], map: "idx_disputations_user_id")
}

enum tasks_status {
  new_task
  processing
  review
  completed
  pending
  cancelled
}

enum task_items_status {
  new_task
  processing
  review
  completed
  pending
  cancelled
}

enum disputations_status {
  dispute
  processing
  validated
  completed
}